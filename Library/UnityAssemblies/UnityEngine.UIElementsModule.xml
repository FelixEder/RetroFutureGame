<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.UIElementsModule</name>
    </assembly>
    <member name="T:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.StatusFlags">
      <summary>
        <para>Status of the menu item.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.StatusFlags.Checked">
      <summary>
        <para>The item is displayed with a checkmark.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.StatusFlags.Disabled">
      <summary>
        <para>The item is disabled and is not be selectable by the user.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.StatusFlags.Hidden">
      <summary>
        <para>The item is not displayed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.StatusFlags.Normal">
      <summary>
        <para>The item is displayed normally.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.AttachToPanelEvent">
      <summary>
        <para>Event sent after an element is added to an element that is a descendent of a panel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.AttachToPanelEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.BaseTextElement">
      <summary>
        <para>Abstract base class for VisualElement containing text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.BaseTextElement.text">
      <summary>
        <para>The text associated with the element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.BlurEvent">
      <summary>
        <para>Event sent immediately after an element has lost focus. Capturable, does not bubbles, non-cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.BlurEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.CallbackEventHandler">
      <summary>
        <para>Interface for classes capable of having callbacks to handle events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.CallbackEventHandler.HandleEvent(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Handle an event, most often by executing the callbacks associated with the event.</para>
      </summary>
      <param name="evt">The event to handle.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.CallbackEventHandler.HasBubbleHandlers">
      <summary>
        <para>Return true if event handlers for the event propagation bubble up phase have been attached on this object.</para>
      </summary>
      <returns>
        <para>True if object has event handlers for the bubble up phase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.CallbackEventHandler.HasCaptureHandlers">
      <summary>
        <para>Return true if event handlers for the event propagation capture phase have been attached on this object.</para>
      </summary>
      <returns>
        <para>True if object has event handlers for the capture phase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.CallbackEventHandler.RegisterCallback(UnityEngine.Experimental.UIElements.EventCallback`1&lt;TEventType&gt;,UnityEngine.Experimental.UIElements.Capture)">
      <summary>
        <para>Add an event handler on the instance. If the handler has already been registered on the same phase (capture or bubbling), this will have no effect.</para>
      </summary>
      <param name="callback">The event handler to add.</param>
      <param name="useCapture">By default the callback will be called during the bubbling phase. Pass Capture.Capture to have the callback called during the capture phase instead.</param>
      <param name="userArgs">Data to pass to the callback.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.CallbackEventHandler.RegisterCallback(UnityEngine.Experimental.UIElements.EventCallback`2&lt;TEventType,TUserArgsType&gt;,TUserArgsType,UnityEngine.Experimental.UIElements.Capture)">
      <summary>
        <para>Add an event handler on the instance. If the handler has already been registered on the same phase (capture or bubbling), this will have no effect.</para>
      </summary>
      <param name="callback">The event handler to add.</param>
      <param name="useCapture">By default the callback will be called during the bubbling phase. Pass Capture.Capture to have the callback called during the capture phase instead.</param>
      <param name="userArgs">Data to pass to the callback.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.CallbackEventHandler.UnregisterCallback(UnityEngine.Experimental.UIElements.EventCallback`1&lt;TEventType&gt;,UnityEngine.Experimental.UIElements.Capture)">
      <summary>
        <para>Remove callback from the instance.</para>
      </summary>
      <param name="callback">The callback to remove.</param>
      <param name="useCapture">Select wether the callback should be removed from the capture or the bubbling phase.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.CallbackEventHandler.UnregisterCallback(UnityEngine.Experimental.UIElements.EventCallback`2&lt;TEventType,TUserArgsType&gt;,UnityEngine.Experimental.UIElements.Capture)">
      <summary>
        <para>Remove callback from the instance.</para>
      </summary>
      <param name="callback">The callback to remove.</param>
      <param name="useCapture">Select wether the callback should be removed from the capture or the bubbling phase.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.Capture">
      <summary>
        <para>Used to specify the phases where an event handler should be executed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.Capture.Capture">
      <summary>
        <para>The event handler should be executed during the capture and the target phases.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.Capture.NoCapture">
      <summary>
        <para>The event handler should be executed during the target and bubble up phases.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ChangeEvent`1">
      <summary>
        <para>Sends an event when a value from a field changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ChangeEvent_1.newValue">
      <summary>
        <para>The new value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ChangeEvent_1.previousValue">
      <summary>
        <para>The value before the change occured.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ChangeEvent_1.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ChangeEvent_1.GetPooled(T,T)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="previousValue"></param>
      <param name="newValue"></param>
      <returns>
        <para>An event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ChangeEvent_1.Init">
      <summary>
        <para>Sets the event to its initial state.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ChangeType">
      <summary>
        <para>Enum which describes the various types of changes that can occur on a VisualElement.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ChangeType.All">
      <summary>
        <para>All change types have been flagged.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ChangeType.PersistentData">
      <summary>
        <para>Persistence key or parent has changed on the current VisualElement.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ChangeType.PersistentDataPath">
      <summary>
        <para>Persistence key or parent has changed on some child of the current VisualElement.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ContextualMenu">
      <summary>
        <para>A contextual menu.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.AppendAction(System.String,System.Action`1&lt;UnityEngine.Experimental.UIElements.EventBase&gt;,System.Func`2&lt;UnityEngine.Experimental.UIElements.EventBase,UnityEngine.Experimental.UIElements.ContextualMenu/MenuAction/StatusFlags&gt;)">
      <summary>
        <para>Add an item that will execute an action in the contextual menu. The item is added at the end of the current item list.</para>
      </summary>
      <param name="actionName">Name of the item. This name will be displayed in the contextual menu.</param>
      <param name="action">Callback to execute when the user selects this item in the menu.</param>
      <param name="actionStatusCallback">Callback to execute to determine the status of the item.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.AppendSeparator">
      <summary>
        <para>Add a separator line in the menu. The separator is added at the end of the current item list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.InsertAction(System.String,System.Action`1&lt;UnityEngine.Experimental.UIElements.EventBase&gt;,System.Func`2&lt;UnityEngine.Experimental.UIElements.EventBase,UnityEngine.Experimental.UIElements.ContextualMenu/MenuAction/StatusFlags&gt;,System.Int32)">
      <summary>
        <para>Add an item that will execute an action in the contextual menu. The item is added at the end of the specified index in the list.</para>
      </summary>
      <param name="actionName">Name of the item. This name will be displayed in the contextual menu.</param>
      <param name="action">Callback to execute when the user selects this item in the menu.</param>
      <param name="actionStatusCallback">Callback to execute to determine the status of the item.</param>
      <param name="atIndex">Index where the item should be inserted.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.InsertSeparator(System.Int32)">
      <summary>
        <para>Add a separator line in the menu. The separator is added at the end of the specified index in the list.</para>
      </summary>
      <param name="atIndex">Index where the separator should be inserted.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction">
      <summary>
        <para>A menu action item.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.name">
      <summary>
        <para>The name of the item.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.status">
      <summary>
        <para>The status of the item.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.AlwaysDisabled(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Status callback that always returns StatusFlags.Disabled.</para>
      </summary>
      <param name="e">The event that triggered the display of the context menu.</param>
      <returns>
        <para>Always return StatusFlags.Disabled.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.AlwaysEnabled(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Status callback that always returns StatusFlags.Enabled.</para>
      </summary>
      <param name="e">The event that triggered the display of the context menu.</param>
      <returns>
        <para>Always return StatusFlags.Enabled.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.#ctor(System.String,System.Action`1&lt;UnityEngine.Experimental.UIElements.EventBase&gt;,System.Func`2&lt;UnityEngine.Experimental.UIElements.EventBase,UnityEngine.Experimental.UIElements.ContextualMenu/MenuAction/StatusFlags&gt;)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="actionName"></param>
      <param name="actionCallback"></param>
      <param name="actionStatusCallback"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.Execute(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Execute the callback associated with this item.</para>
      </summary>
      <param name="e">The event that triggered the display of the context menu.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.MenuAction.UpdateActionStatus(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Update the status flag of this item by calling the item status callback.</para>
      </summary>
      <param name="e">The event that triggered the display of the context menu.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ContextualMenu.MenuItem">
      <summary>
        <para>An item in a contextual menu.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.MenuItems">
      <summary>
        <para>Get the list of menu items.</para>
      </summary>
      <returns>
        <para>The list of items in the menu.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.PrepareForDisplay(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Update the status of all items by calling their status callback and remove the separators in excess. This is called just before displaying the menu.</para>
      </summary>
      <param name="e"></param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ContextualMenu.Separator">
      <summary>
        <para>A separator menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenu.Separator.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent">
      <summary>
        <para>An event sent when a contextual menu needs to be filled with menu item.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent.menu">
      <summary>
        <para>The menu to populate.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent.GetPooled(UnityEngine.Experimental.UIElements.EventBase,UnityEngine.Experimental.UIElements.ContextualMenu,UnityEngine.Experimental.UIElements.IEventHandler)">
      <summary>
        <para>Retrieves an event from the event pool. Use this method to retrieve a mouse event and initialize the event, instead of creating a new mouse event.</para>
      </summary>
      <param name="triggerEvent">The event that triggered the display of the contextual menu.</param>
      <param name="menu">The menu to populate.</param>
      <param name="target">The element that triggered the display of the contextual menu.</param>
      <returns>
        <para>The event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.CreationContext">
      <summary>
        <para>This class is used during UXML template instantiation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.CursorStyle">
      <summary>
        <para>Script interface for VisualElement cursor style property IStyle.cursor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.CursorStyle.hotspot">
      <summary>
        <para>The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.CursorStyle.texture">
      <summary>
        <para>The texture to use for the cursor style. To use a texture as a cursor, import the texture with "Read/Write enabled" in the texture importer (or using the "Cursor" defaults).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.DetachFromPanelEvent">
      <summary>
        <para>Event sent just before an element is detach from its parent, if the parent is the descendant of a panel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.DetachFromPanelEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.EventBase">
      <summary>
        <para>The base class for all UIElements events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.bubbles">
      <summary>
        <para>Returns whether this event type bubbles up in the event propagation path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.capturable">
      <summary>
        <para>Return whether this event is sent down the event propagation path during the capture phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.currentTarget">
      <summary>
        <para>The current target of the event. The current target is the element in the propagation path for which event handlers are currently being executed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.dispatch">
      <summary>
        <para>Return whether the event is currently being dispatched to visual element. An event can not be redispatched while being dispatched. If you need to recursively redispatch an event, you should use a copy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.flags">
      <summary>
        <para>Flags for the event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.imguiEvent">
      <summary>
        <para>The IMGUIEvent at the source of this event. This can be null as not all events are generated by IMGUI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.isDefaultPrevented">
      <summary>
        <para>Return true if the default actions should not be executed for this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.isImmediatePropagationStopped">
      <summary>
        <para>Return true if StopImmediatePropagation() has been called for this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.isPropagationStopped">
      <summary>
        <para>Return true if StopPropagation() has been called for this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.originalMousePosition">
      <summary>
        <para>The original mouse position of the IMGUI event, before it is transformed to the local element coordinates. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.propagationPhase">
      <summary>
        <para>The current propagation phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.target">
      <summary>
        <para>The target for this event. The is the visual element that received the event. Unlike currentTarget, target does not change when the event is sent to elements along the propagation path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.EventBase.timestamp">
      <summary>
        <para>The time at which the event was created.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase.Dispose">
      <summary>
        <para>Implementation of IDisposable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.EventBase.EventFlags">
      <summary>
        <para>Flags to describe the characteristics of an event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.EventBase.EventFlags.Bubbles">
      <summary>
        <para>Event will bubble up the propagation path (i.e. from the target parent up to the visual tree root).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.EventBase.EventFlags.Cancellable">
      <summary>
        <para>Execution of default behavior for this event can be cancelled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.EventBase.EventFlags.Capturable">
      <summary>
        <para>Event will be sent down the propagation path during the capture phase (i.e. from the visual tree root down to the target parent).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.EventBase.EventFlags.None">
      <summary>
        <para>Empty value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.EventBase.EventFlags.Pooled">
      <summary>
        <para>Event has been instanciated from the event pool.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase.GetEventTypeId">
      <summary>
        <para>Get the type id for this event instance.</para>
      </summary>
      <returns>
        <para>The type ID.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase.PreventDefault">
      <summary>
        <para>Call this function to prevent the execution of the default actions for this event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase.RegisterEventType">
      <summary>
        <para>Register an event class to the event type system.</para>
      </summary>
      <returns>
        <para>The type ID.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase.StopImmediatePropagation">
      <summary>
        <para>Immediately stop the propagation of this event. The event will not be sent to any further event handlers on the current target or on any other element in the propagation path.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase.StopPropagation">
      <summary>
        <para>Stop the propagation of this event. The event will not be sent to any further element in the propagation path. Further event handlers on the current target will be executed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.EventBase`1">
      <summary>
        <para>Generic base class for events, implementing event pooling and automatic registration to the event type system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase_1.Dispose">
      <summary>
        <para>Implementation of IDispose.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase_1.GetEventTypeId">
      <summary>
        <para>Get the type id for this event instance.</para>
      </summary>
      <returns>
        <para>The type ID.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase_1.GetPooled">
      <summary>
        <para>Get an event from the event pool. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <returns>
        <para>An event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase_1.ReleasePooled(T)">
      <summary>
        <para>Release an event obtained from GetPooled().</para>
      </summary>
      <param name="evt">The event to release.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.EventBase_1.TypeId">
      <summary>
        <para>Get the type id for this event instance.</para>
      </summary>
      <returns>
        <para>The event instance type id.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.Focusable">
      <summary>
        <para>Base class for objects that can get the focus.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.Focusable.canGrabFocus">
      <summary>
        <para>Return true if the element can be focused.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.Focusable.focusController">
      <summary>
        <para>Return the focus controller for this element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.Focusable.focusIndex">
      <summary>
        <para>An integer used to sort focusables in the focus ring. A negative value means that the element can not be focused.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.Focusable.Blur">
      <summary>
        <para>Tell the element to release the focus.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.Focusable.Focus">
      <summary>
        <para>Attempt to give the focus to this element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.FocusChangeDirection">
      <summary>
        <para>Base class for defining in which direction the focus moves in a focus ring.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.FocusChangeDirection.lastValue">
      <summary>
        <para>Last value for the direction defined by this class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.FocusChangeDirection.none">
      <summary>
        <para>The null direction. This is usually used when the focus stays on the same element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.FocusChangeDirection.unspecified">
      <summary>
        <para>Focus came from an unspecified direction, for example after a mouse down.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.FocusChangeDirection.implop_int(FocusChangeDirection)(UnityEngine.Experimental.UIElements.FocusChangeDirection)">
      <summary>
        <para>The underlying integer value for this direction.</para>
      </summary>
      <param name="fcd"></param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.FocusController">
      <summary>
        <para>Class in charge of managing the focus inside a Panel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.FocusController.focusedElement">
      <summary>
        <para>The currently focused element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusController.#ctor(UnityEngine.Experimental.UIElements.IFocusRing)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="focusRing"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusController.SwitchFocusOnEvent(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Ask the controller to change the focus according to the event. The focus controller will use its focus ring to choose the next element to be focused.</para>
      </summary>
      <param name="e"></param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.FocusEvent">
      <summary>
        <para>Event sent immediately after an element has gained focus. Capturable, does not bubbles, non-cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.FocusEventBase`1">
      <summary>
        <para>Base class for focus related events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.FocusEventBase_1.direction">
      <summary>
        <para>Direction of the focus change.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.FocusEventBase_1.relatedTarget">
      <summary>
        <para>For FocusOut and Blur events, the element gaining the focus. For FocusIn and Focus events, the element losing the focus.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusEventBase_1.GetPooled(UnityEngine.Experimental.UIElements.IEventHandler,UnityEngine.Experimental.UIElements.Focusable,UnityEngine.Experimental.UIElements.FocusChangeDirection)">
      <summary>
        <para>Get an event from the event pool and initialize it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="target">The event target.</param>
      <param name="relatedTarget">The related target.</param>
      <param name="direction">The direction of the focus change.</param>
      <returns>
        <para>An event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusEventBase_1.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.FocusInEvent">
      <summary>
        <para>Event sent immediately before an element gains focus. Capturable, bubbles, non-cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusInEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusInEvent.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.FocusOutEvent">
      <summary>
        <para>Event sent immediately before an element loses focus. Capturable, bubbles, non-cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusOutEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.FocusOutEvent.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IChangeEvent">
      <summary>
        <para>Base interface for ChangeEvent.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IEventDispatcher">
      <summary>
        <para>Interface for event dispatchers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IEventDispatcher.DispatchEvent(UnityEngine.Experimental.UIElements.EventBase,UnityEngine.Experimental.UIElements.IPanel)">
      <summary>
        <para>Dispatch an event to the panel.</para>
      </summary>
      <param name="evt">The event to dispatch.</param>
      <param name="panel">The panel where the event will be dispatched.</param>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IEventHandler">
      <summary>
        <para>Interface for class capable of handling events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IEventHandler.HandleEvent(UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Handle an event.</para>
      </summary>
      <param name="evt">The event to handle.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IEventHandler.HasBubbleHandlers">
      <summary>
        <para>Return true if event handlers for the event propagation bubble up phase have been attached on this object.</para>
      </summary>
      <returns>
        <para>True if object has event handlers for the bubble up phase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IEventHandler.HasCaptureHandlers">
      <summary>
        <para>Return true if event handlers for the event propagation capture phase have been attached on this object.</para>
      </summary>
      <returns>
        <para>True if object has event handlers for the capture phase.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IFocusEvent">
      <summary>
        <para>Interface for focus events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IFocusEvent.direction">
      <summary>
        <para>Direction of the focus change.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IFocusEvent.relatedTarget">
      <summary>
        <para>Related target. See implementation for specific meaning.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IFocusRing">
      <summary>
        <para>Interface for classes implementing focus rings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IFocusRing.GetFocusChangeDirection(UnityEngine.Experimental.UIElements.Focusable,UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="e"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IFocusRing.GetNextFocusable(UnityEngine.Experimental.UIElements.Focusable,UnityEngine.Experimental.UIElements.FocusChangeDirection)">
      <summary>
        <para>Get the next element in the given direction.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="direction"></param>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IKeyboardEvent">
      <summary>
        <para>Interface for keyboard events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IKeyboardEvent.altKey">
      <summary>
        <para>Return true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IKeyboardEvent.character">
      <summary>
        <para>The character.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IKeyboardEvent.commandKey">
      <summary>
        <para>Return true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IKeyboardEvent.ctrlKey">
      <summary>
        <para>Return true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IKeyboardEvent.keyCode">
      <summary>
        <para>The key code.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IKeyboardEvent.modifiers">
      <summary>
        <para>Flag set holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IKeyboardEvent.shiftKey">
      <summary>
        <para>Return true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.Image">
      <summary>
        <para>A VisualElement representing a source texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.Image.image">
      <summary>
        <para>The source texture of the Image element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.Image.sourceRect">
      <summary>
        <para>The source rectangle inside the texture relative to the top left corner.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.Image.uv">
      <summary>
        <para>The base texture coordinates of the Image relative to the bottom left corner.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.IMGUIEvent">
      <summary>
        <para>Class used to dispatch IMGUI event types that have no equivalent in UIElements events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IMGUIEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IMGUIEvent.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Get an event from the event pool and initialize it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="systemEvent">The IMGUI event used to initialize the event.</param>
      <returns>
        <para>An event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IMGUIEvent.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IMouseCaptureEvent">
      <summary>
        <para>Interface for mouse capture events.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IMouseEvent">
      <summary>
        <para>Interface for mouse events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.altKey">
      <summary>
        <para>Return true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.button">
      <summary>
        <para>Integer representing the pressed mouse button: 0 is left, 1 is right, 2 is center.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.clickCount">
      <summary>
        <para>Number of clicks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.commandKey">
      <summary>
        <para>Return true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.ctrlKey">
      <summary>
        <para>Return true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.localMousePosition">
      <summary>
        <para>The mouse position in the current target coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.modifiers">
      <summary>
        <para>Flag set holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.mouseDelta">
      <summary>
        <para>Mouse position difference between the last mouse event and this one.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.mousePosition">
      <summary>
        <para>The mouse position in the panel coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IMouseEvent.shiftKey">
      <summary>
        <para>Return true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.INotifyValueChanged_1">
      <summary>
        <para>Interface for controls that hold a value and can notify when it is changed by user input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.INotifyValueChanged_1.value">
      <summary>
        <para>The Value held by the control.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.INotifyValueChanged_1.OnValueChanged(UnityEngine.Experimental.UIElements.EventCallback`1&lt;UnityEngine.Experimental.UIElements.ChangeEvent`1&lt;T&gt;&gt;)">
      <summary>
        <para>Registers this callback to receive ChangeEvent&lt;T&gt; when value was changed by user input.</para>
      </summary>
      <param name="callback"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.INotifyValueChanged_1.SetValueAndNotify(T)">
      <summary>
        <para>Set the value and, if different, notifies registers callbacks with a ChangeEvent&lt;T&gt;</para>
      </summary>
      <param name="newValue">The new value to be set.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.InputEvent">
      <summary>
        <para>Sends an event when text from a TextField changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.InputEvent.newData">
      <summary>
        <para>The new text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.InputEvent.previousData">
      <summary>
        <para>The text before the change occured.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.InputEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.InputEvent.GetPooled(System.String,System.String)">
      <summary>
        <para>Gets an event from the event pool and initializes it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="newData">The new text.</param>
      <param name="previousData">The text before the change occured.</param>
      <returns>
        <para>An event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.InputEvent.Init">
      <summary>
        <para>Sets the event to its initial state.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IPanel">
      <summary>
        <para>Interface for classes implementing UI panels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IPanel.focusController">
      <summary>
        <para>Return the focus controller for this panel.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IScheduledItem">
      <summary>
        <para>A reference to a scheduled action.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IScheduler">
      <summary>
        <para>A scheduler allows you to register actions to be executed at a later point.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IScheduler.Schedule(UnityEngine.Experimental.UIElements.IScheduledItem)">
      <summary>
        <para>Add this item to the list of scheduled tasks.</para>
      </summary>
      <param name="item">The item to register.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IScheduler.ScheduleForDuration(System.Action`1&lt;UnityEngine.Experimental.UIElements.TimerState&gt;,System.Int64,System.Int64,System.Int64)">
      <summary>
        <para>Schedule this action to be executed later. The item will be automatically unscheduled after it has ran for the amount of time specified with the durationMs parameter.</para>
      </summary>
      <param name="timerUpdateEvent">Action to be executed.</param>
      <param name="delayMs">The minimum delay in milliseconds before executing the action.</param>
      <param name="intervalMs">The minimum interval in milliseconds between each execution.</param>
      <param name="durationMs">The total duration in milliseconds where this item will be active.</param>
      <returns>
        <para>Internal reference to the scheduled action.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IScheduler.ScheduleOnce(System.Action`1&lt;UnityEngine.Experimental.UIElements.TimerState&gt;,System.Int64)">
      <summary>
        <para>Schedule this action to be executed later. After the execution, the item will be automatically unscheduled.</para>
      </summary>
      <param name="timerUpdateEvent">Action to be executed.</param>
      <param name="delayMs">The minimum delay in milliseconds before executing the action.</param>
      <returns>
        <para>Internal reference to the scheduled action.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IScheduler.ScheduleUntil(System.Action`1&lt;UnityEngine.Experimental.UIElements.TimerState&gt;,System.Int64,System.Int64,System.Func`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Schedule this action to be executed later. Item will be unscheduled when condition is met.</para>
      </summary>
      <param name="timerUpdateEvent">Action to be executed.</param>
      <param name="delayMs">The minimum delay in milliseconds before executing the action.</param>
      <param name="intervalMs">The minimum interval in milliseconds bettwen each execution.</param>
      <param name="stopCondition">When condition returns true, the item will be unscheduled.</param>
      <returns>
        <para>Internal reference to the scheduled action.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IScheduler.Unschedule(UnityEngine.Experimental.UIElements.IScheduledItem)">
      <summary>
        <para>Manually unschedules a previously scheduled action.</para>
      </summary>
      <param name="item">The item to be removed from this scheduler.</param>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IStyle">
      <summary>
        <para>This interface provides access to a VisualElement style data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.alignContent">
      <summary>
        <para>Alignment of the whole area of children on the cross axis if they span over multiple lines in this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.alignItems">
      <summary>
        <para>Alignment of children on the cross axis of this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.alignSelf">
      <summary>
        <para>Similar to align-items, but only for this specific element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.backgroundColor">
      <summary>
        <para>Background color to paint in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.backgroundImage">
      <summary>
        <para>Background image to paint in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.backgroundSize">
      <summary>
        <para>Background image scaling in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderBottom">
      <summary>
        <para>Space reserved for the bottom edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderBottomLeftRadius">
      <summary>
        <para>This is the radius of the bottom-left corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderBottomRightRadius">
      <summary>
        <para>This is the radius of the bottom-right corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderBottomWidth">
      <summary>
        <para>Space reserved for the bottom edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderColor">
      <summary>
        <para>Color of the border to paint inside the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderLeft">
      <summary>
        <para>Space reserved for the left edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderLeftWidth">
      <summary>
        <para>Space reserved for the left edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderRadius">
      <summary>
        <para>This is the radius of every corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderRight">
      <summary>
        <para>Space reserved for the right edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderRightWidth">
      <summary>
        <para>Space reserved for the right edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderTop">
      <summary>
        <para>Space reserved for the top edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderTopLeftRadius">
      <summary>
        <para>This is the radius of the top-left corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderTopRightRadius">
      <summary>
        <para>This is the radius of the top-right corner when a rounded rectangle is drawn in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.borderTopWidth">
      <summary>
        <para>Space reserved for the top edge of the border during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.cursor">
      <summary>
        <para>Mouse cursor to display when the mouse pointer is over an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.flex">
      <summary>
        <para>Ration of this element in its parent during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.flexBasis">
      <summary>
        <para>Initial main size of a flex item, on the main flex axis. The final layout mught be smaller or larger, according to the flex shrinking and growing determined by the flex property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.flexDirection">
      <summary>
        <para>Direction of the main axis to layout children in a container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.flexGrow">
      <summary>
        <para>Specifies how much the item will grow relative to the rest of the flexible items inside the same container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.flexShrink">
      <summary>
        <para>Specifies how the item will shrink relative to the rest of the flexible items inside the same container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.flexWrap">
      <summary>
        <para>Placement of children over multiple lines if not enough space is available in this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.font">
      <summary>
        <para>Font to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.fontSize">
      <summary>
        <para>Font size to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.fontStyle">
      <summary>
        <para>Font style to draw the element's text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.height">
      <summary>
        <para>Fixed height of an element for the layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.justifyContent">
      <summary>
        <para>Justification of children on the main axis of this container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.marginBottom">
      <summary>
        <para>Space reserved for the bottom edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.marginLeft">
      <summary>
        <para>Space reserved for the left edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.marginRight">
      <summary>
        <para>Space reserved for the right edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.marginTop">
      <summary>
        <para>Space reserved for the top edge of the margin during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.maxHeight">
      <summary>
        <para>Maximum height for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.maxWidth">
      <summary>
        <para>Maximum width for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.minHeight">
      <summary>
        <para>Minimum height for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.minWidth">
      <summary>
        <para>Minimum height for an element, when it is flexible or measures its own size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.paddingBottom">
      <summary>
        <para>Space reserved for the bottom edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.paddingLeft">
      <summary>
        <para>Space reserved for the left edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.paddingRight">
      <summary>
        <para>Space reserved for the right edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.paddingTop">
      <summary>
        <para>Space reserved for the top edge of the padding during the layout phase.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.positionBottom">
      <summary>
        <para>Bottom distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.positionLeft">
      <summary>
        <para>Left distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.positionRight">
      <summary>
        <para>Right distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.positionTop">
      <summary>
        <para>Top distance from the element's box during layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.positionType">
      <summary>
        <para>Element's positioning in its parent container.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.sliceBottom">
      <summary>
        <para>Size of the 9-slice's bottom edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.sliceLeft">
      <summary>
        <para>Size of the 9-slice's left edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.sliceRight">
      <summary>
        <para>Size of the 9-slice's right edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.sliceTop">
      <summary>
        <para>Size of the 9-slice's top edge when painting an element's background image.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.textAlignment">
      <summary>
        <para>Text alignment in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.textClipping">
      <summary>
        <para>Clipping if the text does not fit in the element's box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.textColor">
      <summary>
        <para>Color to use when drawing the text of an element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.width">
      <summary>
        <para>Fixed width of an element for the layout.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IStyle.wordWrap">
      <summary>
        <para>Word wrapping over multiple lines if not enough space is available to draw the text of an element.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.ITransform">
      <summary>
        <para>This interface provides access to a VisualElement transform data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ITransform.matrix">
      <summary>
        <para>Transformation matrix calculated from the position, rotation and scale of the transform (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ITransform.position">
      <summary>
        <para>The position of the VisualElement's transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ITransform.rotation">
      <summary>
        <para>The rotation of the VisualElement's transform stored as a Quaternion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.ITransform.scale">
      <summary>
        <para>The scale of the VisualElement's transform.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IUIElementDataWatch">
      <summary>
        <para>Interface allowing access to this elements datawatch.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUIElementDataWatch.RegisterWatch(UnityEngine.Object,System.Action`1&lt;UnityEngine.Object&gt;)">
      <summary>
        <para>Starts watching an object. When watched, all changes on an object will trigger the callback to be invoked.</para>
      </summary>
      <param name="toWatch">The object to watch.</param>
      <param name="watchNotification">Callback.</param>
      <returns>
        <para>A reference to this datawatch request. Disposing it will ensure any native resources will also be released.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUIElementDataWatch.UnregisterWatch(UnityEngine.Experimental.UIElements.IUIElementDataWatchRequest)">
      <summary>
        <para>Unregisters a previously watched request.</para>
      </summary>
      <param name="requested">The registered request.</param>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IUIElementDataWatchRequest">
      <summary>
        <para>An internal reference to a data watch request.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IUxmlAttributes">
      <summary>
        <para>This type allows UXML attribute value retrieval during the VisualElement instantiation. An instance will be provided to the factory method - see UXMLFactoryAttribute.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUxmlAttributes.GetPropertyBool(System.String,System.Boolean)">
      <summary>
        <para></para>
      </summary>
      <param name="propertyName">Attribute name.</param>
      <param name="def">Default value if the property is not found.</param>
      <returns>
        <para>The attribute value or the default value if not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUxmlAttributes.GetPropertyColor(System.String,UnityEngine.Color)">
      <summary>
        <para></para>
      </summary>
      <param name="propertyName">Attribute name.</param>
      <param name="def">Default value if the property is not found.</param>
      <returns>
        <para>The attribute value or the default value if not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUxmlAttributes.GetPropertyEnum(System.String,T)">
      <summary>
        <para></para>
      </summary>
      <param name="propertyName">Attribute name.</param>
      <param name="def">Default value if the property is not found.</param>
      <returns>
        <para>The attribute value or the default value if not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUxmlAttributes.GetPropertyFloat(System.String,System.Single)">
      <summary>
        <para></para>
      </summary>
      <param name="propertyName">Attribute name.</param>
      <param name="def">Default value if the property is not found.</param>
      <returns>
        <para>The attribute value or the default value if not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUxmlAttributes.GetPropertyInt(System.String,System.Int32)">
      <summary>
        <para></para>
      </summary>
      <param name="propertyName">Attribute name.</param>
      <param name="def">Default value if the property is not found.</param>
      <returns>
        <para>The attribute value or the default value if not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUxmlAttributes.GetPropertyLong(System.String,System.Int64)">
      <summary>
        <para></para>
      </summary>
      <param name="propertyName">Attribute name.</param>
      <param name="defaultValue">Default value if the property is not found.</param>
      <returns>
        <para>The attribute value or the default value if not found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IUxmlAttributes.GetPropertyString(System.String)">
      <summary>
        <para></para>
      </summary>
      <param name="propertyName">Attribute name.</param>
      <returns>
        <para>The raw value or null if not found.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem">
      <summary>
        <para>Represents a scheduled task created with a VisualElement's schedule interface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.element">
      <summary>
        <para>Returns the VisualElement this object is associated with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.isActive">
      <summary>
        <para>Will be true when this item is scheduled. Note that an item's callback will only be executed when it's VisualElement is attached to a panel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.Every(System.Int64)">
      <summary>
        <para>Repeats this action after a specified time.</para>
      </summary>
      <param name="intervalMs">Minimum amount of time in milliseconds between each action execution.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.ExecuteLater(System.Int64)">
      <summary>
        <para>Cancels any previously scheduled execution of this item and re-schedules the item.</para>
      </summary>
      <param name="delayMs">Minimum time in milliseconds before this item will be executed.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.ForDuration(System.Int64)">
      <summary>
        <para>After specified duration, the item will be automatically unscheduled.</para>
      </summary>
      <param name="durationMs">The total duration in milliseconds where this item will be active.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.Pause">
      <summary>
        <para>Removes this item from its VisualElement's scheduler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.Resume">
      <summary>
        <para>If not already active, will schedule this item on its VisualElement's scheduler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.StartingIn(System.Int64)">
      <summary>
        <para>Adds a delay to the first invokation.</para>
      </summary>
      <param name="delayMs">The minimum number of milliseconds after activation where this item's action will be executed.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduledItem.Until(System.Func`1&lt;System.Boolean&gt;)">
      <summary>
        <para>Item will be unscheduled automatically when specified condition is met.</para>
      </summary>
      <param name="stopCondition">When condition returns true, the item will be unscheduled.</param>
      <returns>
        <para>This ScheduledItem.</para>
      </returns>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.IVisualElementScheduler">
      <summary>
        <para>A scheduler allows you to register actions to be executed at a later point.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduler.Execute(System.Action`1&lt;UnityEngine.Experimental.UIElements.TimerState&gt;)">
      <summary>
        <para>Schedule this action to be executed later.</para>
      </summary>
      <param name="timerUpdateEvent">The action to be executed.</param>
      <param name="updateEvent">The action to be executed.</param>
      <returns>
        <para>Reference to the scheduled action.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.IVisualElementScheduler.Execute(System.Action)">
      <summary>
        <para>Schedule this action to be executed later.</para>
      </summary>
      <param name="timerUpdateEvent">The action to be executed.</param>
      <param name="updateEvent">The action to be executed.</param>
      <returns>
        <para>Reference to the scheduled action.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.KeyboardEventBase`1">
      <summary>
        <para>Base class for keyboard events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.altKey">
      <summary>
        <para>Return true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.character">
      <summary>
        <para>The character.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.commandKey">
      <summary>
        <para>Return true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.ctrlKey">
      <summary>
        <para>Return true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.keyCode">
      <summary>
        <para>The key code.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.modifiers">
      <summary>
        <para>Flag set holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.shiftKey">
      <summary>
        <para>Return true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.GetPooled(System.Char,UnityEngine.KeyCode,UnityEngine.EventModifiers)">
      <summary>
        <para>Get an event from the event pool and initialize it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="c">The character for this event.</param>
      <param name="keyCode">The keyCode for this event.</param>
      <param name="modifiers">Event modifier keys that are active for this event.</param>
      <param name="systemEvent">A keyboard IMGUI event.</param>
      <returns>
        <para>A keyboard event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Get an event from the event pool and initialize it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="c">The character for this event.</param>
      <param name="keyCode">The keyCode for this event.</param>
      <param name="modifiers">Event modifier keys that are active for this event.</param>
      <param name="systemEvent">A keyboard IMGUI event.</param>
      <returns>
        <para>A keyboard event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.KeyboardEventBase_1.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.KeyDownEvent">
      <summary>
        <para>Event sent when a key is pressed on the keyboard. Capturable, bubbles, cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.KeyDownEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.KeyUpEvent">
      <summary>
        <para>Event sent when a key is released on the keyboard. Capturable, bubbles, cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.KeyUpEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.ManipulatorActivationFilter">
      <summary>
        <para>Used by manipulators to match events against their requirements.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ManipulatorActivationFilter.button">
      <summary>
        <para>The button that activates the manipulation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ManipulatorActivationFilter.clickCount">
      <summary>
        <para>Number of mouse clicks required to activate the manipulator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.ManipulatorActivationFilter.modifiers">
      <summary>
        <para>Any modifier keys (ie. ctrl, alt, ...) that are needed to activate the manipulation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ManipulatorActivationFilter.Matches(UnityEngine.Experimental.UIElements.IMouseEvent)">
      <summary>
        <para>Returns true if the current mouse event satisfies the activation requirements.</para>
      </summary>
      <param name="e">The mouse event.</param>
      <returns>
        <para>True if the event matches the requirements.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseCaptureController">
      <summary>
        <para>Class that manages capturing mouse events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureController.HasMouseCapture(UnityEngine.Experimental.UIElements.IEventHandler)">
      <summary>
        <para>Checks if the event handler is capturing the mouse.</para>
      </summary>
      <param name="handler">Event handler to check.</param>
      <returns>
        <para>True if the handler captures the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureController.IsMouseCaptureTaken">
      <summary>
        <para>Checks if there is a handler assigned to capturing the mouse.</para>
      </summary>
      <returns>
        <para>Returns true if a handler is assigned to capture the mouse, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureController.ReleaseMouseCapture(UnityEngine.Experimental.UIElements.IEventHandler)">
      <summary>
        <para>Stops an event handler from capturing the mouse.</para>
      </summary>
      <param name="handler">The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureController.ReleaseMouseCapture">
      <summary>
        <para>Stops an event handler from capturing the mouse.</para>
      </summary>
      <param name="handler">The event handler to stop capturing the mouse. If this handler is not assigned to capturing the mouse, nothing happens.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureController.TakeMouseCapture(UnityEngine.Experimental.UIElements.IEventHandler)">
      <summary>
        <para>Assigns an event handler to capture the mouse.</para>
      </summary>
      <param name="handler">The event handler to capture the mouse.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseCaptureEvent">
      <summary>
        <para>Event sent after a handler starts capturing the mouse.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseCaptureEventBase`1">
      <summary>
        <para>Event sent when the handler capturing the mouse changes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureEventBase_1.GetPooled(UnityEngine.Experimental.UIElements.IEventHandler)">
      <summary>
        <para>Retrieves an event from the event pool. Use this method to retrieve a mouse event and initialize the event, instead of creating a new mouse event.</para>
      </summary>
      <param name="target">The handler taking or releasing the mouse capture.</param>
      <returns>
        <para>A IMouseCaptureEvent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureEventBase_1.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseCaptureOutEvent">
      <summary>
        <para>Event sent before a handler stops capturing the mouse.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseCaptureOutEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseDownEvent">
      <summary>
        <para>Mouse down event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseDownEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseEnterEvent">
      <summary>
        <para>Event sent when the mouse pointer enters an element or one of its descendent elements. The event is cancellable, non-capturable, and does not bubble.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseEnterEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseEnterEvent.Init">
      <summary>
        <para>Resets the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseEnterWindowEvent">
      <summary>
        <para>Event sent when the mouse pointer enters a window. Cancellable, non-capturable, does not bubbles.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseEnterWindowEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseEnterWindowEvent.Init">
      <summary>
        <para>Resets the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseEventBase`1">
      <summary>
        <para>The base class for mouse events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.altKey">
      <summary>
        <para>Return true if the Alt key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.button">
      <summary>
        <para>Integer representing the pressed mouse button: 0 is left, 1 is right, 2 is center.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.clickCount">
      <summary>
        <para>Number of clicks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.commandKey">
      <summary>
        <para>Return true if the Windows/Command key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.ctrlKey">
      <summary>
        <para>Return true if the Control key is pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.currentTarget">
      <summary>
        <para>The current target of the event. The current target is the element in the propagation path for which event handlers are currently being executed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.localMousePosition">
      <summary>
        <para>The mouse position in the current target coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.modifiers">
      <summary>
        <para>Flag set holding the pressed modifier keys (Alt, Control, Shift, Windows/Command).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.mouseDelta">
      <summary>
        <para>Mouse position difference between the last mouse event and this one.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.mousePosition">
      <summary>
        <para>The mouse position in the screen coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.MouseEventBase_1.shiftKey">
      <summary>
        <para>Return true if the Shift key is pressed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseEventBase_1.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Get an event from the event pool and initialize it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="systemEvent">A mouse IMGUI event.</param>
      <param name="triggerEvent">A mouse event that is the cause of this new event.</param>
      <returns>
        <para>A mouse event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseEventBase_1.GetPooled">
      <summary>
        <para>Get an event from the event pool and initialize it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="systemEvent">A mouse IMGUI event.</param>
      <param name="triggerEvent">A mouse event that is the cause of this new event.</param>
      <returns>
        <para>A mouse event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseEventBase_1.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseLeaveEvent">
      <summary>
        <para>Event sent when the mouse pointer exits an element and all its descendent elements. The event is cancellable, non-capturable, and does not bubble.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseLeaveEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseLeaveEvent.Init">
      <summary>
        <para>Resets the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseLeaveWindowEvent">
      <summary>
        <para>Event sent when the mouse pointer exits a window. Cancellable, non-capturable, does not bubbles.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseLeaveWindowEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseLeaveWindowEvent.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseMoveEvent">
      <summary>
        <para>Mouse move event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseMoveEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseOutEvent">
      <summary>
        <para>Event sent when the mouse pointer exits an element. Capturable, bubbles, cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseOutEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseOverEvent">
      <summary>
        <para>Event sent when the mouse pointer enters an element. Capturable, bubbles, cancellable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseOverEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.MouseUpEvent">
      <summary>
        <para>Mouse up event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.MouseUpEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.PostLayoutEvent">
      <summary>
        <para>Event sent after the layout is done in a tree. Non-capturable, does not bubble, non-cancellable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.PostLayoutEvent.hasNewLayout">
      <summary>
        <para>True if the layout of the element has changed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.PostLayoutEvent.newRect">
      <summary>
        <para>The new dimensions of the element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.PostLayoutEvent.oldRect">
      <summary>
        <para>The old dimensions of the element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.PostLayoutEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.PostLayoutEvent.GetPooled(System.Boolean,UnityEngine.Rect,UnityEngine.Rect)">
      <summary>
        <para>Gets an event from the event pool and initializes the event with the specified values. Use this method instead of creating a new event. An event obtained with this method should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="hasNewLayout">Whether the target layout changed.</param>
      <param name="oldRect">The old dimensions of the element.</param>
      <param name="newRect">The new dimensions of the element.</param>
      <returns>
        <para>An event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.PostLayoutEvent.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.PropagationPhase">
      <summary>
        <para>The propagation phases of an event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.PropagationPhase.AtTarget">
      <summary>
        <para>The event is being sent to the event target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.PropagationPhase.BubbleUp">
      <summary>
        <para>The event is being sent to the event target parent element up to the root element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.PropagationPhase.Capture">
      <summary>
        <para>The event is being sent to the root element down to the event target parent element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.PropagationPhase.DefaultAction">
      <summary>
        <para>The event is being sent to the target element for it to execute its default actions for this event. Event handlers do not get the events in this phase. Instead, ExecuteDefaultAction is called on the target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.PropagationPhase.None">
      <summary>
        <para>The event is not being propagated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.ScrollView.ScrollTo(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Scroll to a specific child element.</para>
      </summary>
      <param name="child">The child to scroll to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.Slider.OnPersistentDataReady">
      <summary>
        <para>Called when the persistent data is accessible and/or when the data or persistence key have changed (VisualElement is properly parented).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.StyleEnums.Align">
      <summary>
        <para>This enumeration contains values to control how an element is aligned in its parent during the layout phase.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Align.Auto">
      <summary>
        <para>Default value (currently FlexStart).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Align.Center">
      <summary>
        <para>Items are centered on the cross axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Align.FlexEnd">
      <summary>
        <para>Items are aligned at the end on the cross axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Align.FlexStart">
      <summary>
        <para>Items are aligned at the beginning on the cross axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Align.Stretch">
      <summary>
        <para>Stretches items on the cross axis.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection">
      <summary>
        <para>This enumeration defines values used to control in which direction a container will place its children during layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection.Column">
      <summary>
        <para>Vertical layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection.ColumnReverse">
      <summary>
        <para>Vertical layout in reverse order.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection.Row">
      <summary>
        <para>Horizontal layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.FlexDirection.RowReverse">
      <summary>
        <para>Horizontal layout in reverse order.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.StyleEnums.Justify">
      <summary>
        <para>This enumeration contains values to control how children are justified during layout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Justify.Center">
      <summary>
        <para>Items are centered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Justify.FlexEnd">
      <summary>
        <para>Items are justified towards the end of the layout direction.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Justify.FlexStart">
      <summary>
        <para>Items are justified towards the beginning of the main axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Justify.SpaceAround">
      <summary>
        <para>Items are evenly distributed in the line  with extra space on each end of the line.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Justify.SpaceBetween">
      <summary>
        <para>Items are evenly distributed in the line; first item is at the beginning of the line, last item is at the end.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.StyleEnums.PositionType">
      <summary>
        <para>This enumeration contains values to control how an element is positioned in its parent container.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.PositionType.Absolute">
      <summary>
        <para>The element is positioned in relation to its parent box and does not contribute to the layout anymore.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.PositionType.Relative">
      <summary>
        <para>The element is positioned in relation to its default box as calculated by layout.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.StyleEnums.Wrap">
      <summary>
        <para>This enumeration contains values to control how elements are placed in a container if not enough space is available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Wrap.NoWrap">
      <summary>
        <para>All elements are placed on the same line.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleEnums.Wrap.Wrap">
      <summary>
        <para>Elements are placed over multiple lines.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle">
      <summary>
        <para>This interface exposes methods to read custom style properties applied from USS files to visual elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle.ApplyCustomProperty(System.String,UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1&lt;System.Single&gt;&amp;)">
      <summary>
        <para>Read a style property value into the specified StyleValue&lt;T&gt;.</para>
      </summary>
      <param name="propertyName">Name of the property in USS.</param>
      <param name="target">Target StyleValue&lt;T&gt; field or variable to write to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle.ApplyCustomProperty(System.String,UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1&lt;System.Int32&gt;&amp;)">
      <summary>
        <para>Read a style property value into the specified StyleValue&lt;T&gt;.</para>
      </summary>
      <param name="propertyName">Name of the property in USS.</param>
      <param name="target">Target StyleValue&lt;T&gt; field or variable to write to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle.ApplyCustomProperty(System.String,UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1&lt;System.Boolean&gt;&amp;)">
      <summary>
        <para>Read a style property value into the specified StyleValue&lt;T&gt;.</para>
      </summary>
      <param name="propertyName">Name of the property in USS.</param>
      <param name="target">Target StyleValue&lt;T&gt; field or variable to write to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle.ApplyCustomProperty(System.String,UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1&lt;UnityEngine.Color&gt;&amp;)">
      <summary>
        <para>Read a style property value into the specified StyleValue&lt;T&gt;.</para>
      </summary>
      <param name="propertyName">Name of the property in USS.</param>
      <param name="target">Target StyleValue&lt;T&gt; field or variable to write to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle.ApplyCustomProperty(System.String,UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1&lt;T&gt;&amp;)">
      <summary>
        <para>Read a style property value into the specified StyleValue&lt;T&gt;.</para>
      </summary>
      <param name="propertyName">Name of the property in USS.</param>
      <param name="target">Target StyleValue&lt;T&gt; field or variable to write to.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle.ApplyCustomProperty(System.String,UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1&lt;System.String&gt;&amp;)">
      <summary>
        <para>Read a style property value into the specified StyleValue&lt;T&gt;.</para>
      </summary>
      <param name="propertyName">Name of the property in USS.</param>
      <param name="target">Target StyleValue&lt;T&gt; field or variable to write to.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.StyleSheets.StyleValue`1">
      <summary>
        <para>This generic structure encodes a value type that can come from USS or be specified programmatically.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.StyleSheets.StyleValue_1.nil">
      <summary>
        <para>This represents the default value for a StyleValue&lt;T&gt; of the according generic type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.StyleSheets.StyleValue_1.value">
      <summary>
        <para>The actual value of the StyleValue&lt;T&gt;.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.StyleValue_1.Create(T)">
      <summary>
        <para>Creates a StyleValue of the according generic type directly from a value.</para>
      </summary>
      <param name="value">Value to be used as inline style.</param>
      <returns>
        <para>The result StyleValue&lt;T&gt;</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.StyleValue_1.#ctor(T)">
      <summary>
        <para>This constructor can be used to specified an alternate default value but it is recommended to use StyleValue&lt;T&gt;.nil.</para>
      </summary>
      <param name="value">Default starting value.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.StyleSheets.StyleValue_1.GetSpecifiedValueOrDefault(T)">
      <summary>
        <para>Utility function to be used when reading custom styles values and provide a default value in one step.</para>
      </summary>
      <param name="defaultValue">Default value to be returned if no value is set.</param>
      <returns>
        <para>The value to be used for the custom style.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.TextField">
      <summary>
        <para>A textfield is a rectangular area where the user can edit a string.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextField.isPasswordField">
      <summary>
        <para>Set this to true to mask the characters and false if otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextField.multiline">
      <summary>
        <para>Set this to true to allow multiple lines in the textfield and false if otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextField.value">
      <summary>
        <para>The string currently being exposed by the field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextField.#ctor">
      <summary>
        <para>Creates a new textfield.</para>
      </summary>
      <param name="maxLength">The maximum number of characters this textfield can hold. If 0, there is no limit.</param>
      <param name="multiline">Set this to true to allow multiple lines in the textfield and false if otherwise.</param>
      <param name="isPasswordField">Set this to true to mask the characters and false if otherwise.</param>
      <param name="maskChar">The character used for masking in a password field.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextField.#ctor(System.Int32,System.Boolean,System.Boolean,System.Char)">
      <summary>
        <para>Creates a new textfield.</para>
      </summary>
      <param name="maxLength">The maximum number of characters this textfield can hold. If 0, there is no limit.</param>
      <param name="multiline">Set this to true to allow multiple lines in the textfield and false if otherwise.</param>
      <param name="isPasswordField">Set this to true to mask the characters and false if otherwise.</param>
      <param name="maskChar">The character used for masking in a password field.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextField.OnPersistentDataReady">
      <summary>
        <para>Called when the persistent data is accessible and/or when the data or persistence key have changed (VisualElement is properly parented).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextField.OnValueChanged(UnityEngine.Experimental.UIElements.EventCallback`1&lt;UnityEngine.Experimental.UIElements.ChangeEvent`1&lt;System.String&gt;&gt;)">
      <summary>
        <para>Registers this callback to receive ChangeEvent&lt;string&gt; when value was changed by user input.</para>
      </summary>
      <param name="callback">Callback to be notified when value was changed by user input.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextField.SetValueAndNotify(System.String)">
      <summary>
        <para>Set the value and, if different, notifies registers callbacks with a ChangeEvent&lt;string&gt;</para>
      </summary>
      <param name="newValue">The new value to be set.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.TextInputFieldBase">
      <summary>
        <para>Abstract base class used for all text-based fields.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextInputFieldBase.cursorColor">
      <summary>
        <para>Color of the cursor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextInputFieldBase.doubleClickSelectsWord">
      <summary>
        <para>Controls whether double clicking selects the word under the mouse pointer or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextInputFieldBase.isPasswordField">
      <summary>
        <para>Returns true if the field is used to edit a password.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextInputFieldBase.maskChar">
      <summary>
        <para>The character used for masking in a password field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextInputFieldBase.maxLength">
      <summary>
        <para>Maximum number of characters for the field.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextInputFieldBase.selectionColor">
      <summary>
        <para>Background color of selected text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.TextInputFieldBase.tripleClickSelectsLine">
      <summary>
        <para>Controls whether triple clicking selects the entire line under the mouse pointer or not.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextInputFieldBase.BuildContextualMenu(UnityEngine.Experimental.UIElements.ContextualMenuPopulateEvent)">
      <summary>
        <para>Add menu items to the text field contextual menu.</para>
      </summary>
      <param name="evt">The event holding the menu to populate.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextInputFieldBase.#ctor(System.Int32,System.Char)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="maxLength">Maximum number of characters for the field.</param>
      <param name="maskChar">The character used for masking in a password field.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextInputFieldBase.SelectAll">
      <summary>
        <para>Selects all the text.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.TextInputFieldBase.UpdateText(System.String)">
      <summary>
        <para>Changes the value of the field and sends an input event.</para>
      </summary>
      <param name="value">The new text to set.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.Toggle.OnToggle(System.Action)">
      <summary>
        <para>Sets the event callback for this toggle button.</para>
      </summary>
      <param name="clickEvent">The action to be called when this Toggle is clicked.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.UQuery">
      <summary>
        <para>UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder`1">
      <summary>
        <para>Utility Object that contructs a set of selection rules to be ran on a root visual element.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Active">
      <summary>
        <para>Selects all elements that are active.</para>
      </summary>
      <returns>
        <para>A QueryBuilder with the selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.AtIndex(System.Int32)">
      <summary>
        <para>Convenience overload, shorthand for Build().AtIndex().</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Build">
      <summary>
        <para>Compiles the selection rules into a QueryState object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Checked">
      <summary>
        <para>Selects all elements that are checked.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Children(System.String,System.String[])">
      <summary>
        <para>Selects all direct child elements of elements matching the previous rules.</para>
      </summary>
      <param name="name"></param>
      <param name="classes"></param>
      <param name="className"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Children(System.String,System.String)">
      <summary>
        <para>Selects all direct child elements of elements matching the previous rules.</para>
      </summary>
      <param name="name"></param>
      <param name="classes"></param>
      <param name="className"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Class(System.String)">
      <summary>
        <para>Selects all elements with the given class. Not to be confused with Type (see OfType&lt;&gt;()).</para>
      </summary>
      <param name="classname"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.#ctor(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Initializes a QueryBuilder.</para>
      </summary>
      <param name="visualElement">The root element on which to condfuct the search query.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Descendents(System.String,System.String[])">
      <summary>
        <para>Selects all elements that are descendants of currently matching ancestors.</para>
      </summary>
      <param name="name"></param>
      <param name="classNames"></param>
      <param name="classname"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Descendents(System.String,System.String)">
      <summary>
        <para>Selects all elements that are descendants of currently matching ancestors.</para>
      </summary>
      <param name="name"></param>
      <param name="classNames"></param>
      <param name="classname"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Enabled">
      <summary>
        <para>Selects all elements that are enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.First">
      <summary>
        <para>Convenience overload, shorthand for Build().First().</para>
      </summary>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Focused">
      <summary>
        <para>Selects all elements that are enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.ForEach(System.Action`1&lt;T&gt;)">
      <summary>
        <para>Convenience overload, shorthand for Build().ForEach().</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.ForEach(System.Collections.Generic.List`1&lt;T2&gt;,System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Convenience overload, shorthand for Build().ForEach().</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
      <param name="result">Each return value will be added to this list.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.ForEach(System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Convenience overload, shorthand for Build().ForEach().</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
      <returns>
        <para>Returns a list of all the results of the function calls.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Hovered">
      <summary>
        <para>Selects all elements that are hovered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Last">
      <summary>
        <para>Convenience overload, shorthand for Build().Last().</para>
      </summary>
      <returns>
        <para>The last element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Name(System.String)">
      <summary>
        <para>Selects element with this name.</para>
      </summary>
      <param name="id"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.NotActive">
      <summary>
        <para>Selects all elements that are not active.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.NotChecked">
      <summary>
        <para>Selects all elements that npot checked.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.NotEnabled">
      <summary>
        <para>Selects all elements that are not enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.NotFocused">
      <summary>
        <para>Selects all elements that don't currently own the focus.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.NotHovered">
      <summary>
        <para>Selects all elements that are not hovered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.NotSelected">
      <summary>
        <para>Selects all elements that are not selected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.NotVisible">
      <summary>
        <para>Selects all elements that are not visible.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.OfType(System.String,System.String[])">
      <summary>
        <para>Selects all elements of the specified Type (eg: Label, Button, ScrollView, etc).</para>
      </summary>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.OfType(System.String,System.String)">
      <summary>
        <para>Selects all elements of the specified Type (eg: Label, Button, ScrollView, etc).</para>
      </summary>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Selected">
      <summary>
        <para>Selects all elements that are selected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.ToList">
      <summary>
        <para>Convenience method. shorthand for Build().ToList.</para>
      </summary>
      <returns>
        <para>Returns a list containing elements satisfying selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.ToList(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Convenience method. Shorthand gor Build().ToList().</para>
      </summary>
      <param name="results">Adds all elements satisfying selection rules to the list.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Visible">
      <summary>
        <para>Selects all elements that are visible.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryBuilder_1.Where(System.Func`2&lt;T,System.Boolean&gt;)">
      <summary>
        <para>Selects all elements satifying the predicate.</para>
      </summary>
      <param name="selectorPredicate">Predicate that must return true for selected elements.</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.UQuery.QueryState`1">
      <summary>
        <para>Query object containing all the selection rules. Can be saved and rerun later without re-allocating memory.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.AtIndex(System.Int32)">
      <summary>
        <para>Selects the n th element matching all the criteria, or null if not enough elements were found.</para>
      </summary>
      <param name="index">The index of the matched element.</param>
      <returns>
        <para>The match element at the specified index.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.First">
      <summary>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </summary>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.ForEach(System.Action`1&lt;T&gt;)">
      <summary>
        <para>Invokes function on all elements matching the query.</para>
      </summary>
      <param name="funcCall">The action to be invoked with each matching element.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.ForEach(System.Collections.Generic.List`1&lt;T2&gt;,System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Invokes function on all elements matching the query.</para>
      </summary>
      <param name="result">Each return value will be added to this list.</param>
      <param name="funcCall">The function to be invoked with each matching element.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.ForEach(System.Func`2&lt;T,T2&gt;)">
      <summary>
        <para>Invokes function on all elements matching the query. Overloaded for convenience.</para>
      </summary>
      <param name="funcCall">The function to be invoked with each matching element.</param>
      <returns>
        <para>Returns a list of all the results of the function calls.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.Last">
      <summary>
        <para>The last element matching all the criteria, or null if none was found.</para>
      </summary>
      <returns>
        <para>The last element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.RebuildOn(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Creates a new QueryState with the same selection rules, applied on another VisualElement.</para>
      </summary>
      <param name="element">The element on which to apply the selection rules.</param>
      <returns>
        <para>A new QueryState with the same selection rules, applied on this element.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.ToList">
      <summary>
        <para>Returns a list containing elements satisfying selection rules.</para>
      </summary>
      <returns>
        <para>Returns a list containing elements satisfying selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQuery.QueryState_1.ToList(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Adds all elements satisfying selection rules to the list.</para>
      </summary>
      <param name="results">Adds all elements satisfying selection rules to the list.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.UQueryExtensions">
      <summary>
        <para>UQuery is a set of extension methods allowing you to select individual or collection of visualElements inside a complex hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQueryExtensions.Q(UnityEngine.Experimental.UIElements.VisualElement,System.String,System.String)">
      <summary>
        <para>Convenience overload, shorthand for Query&lt;T&gt;.Build().First().</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQueryExtensions.Q(UnityEngine.Experimental.UIElements.VisualElement,System.String,System.String[])">
      <summary>
        <para>Convenience overload, shorthand for Query&lt;T&gt;.Build().First().</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>The first element matching all the criteria, or null if none was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQueryExtensions.Query(UnityEngine.Experimental.UIElements.VisualElement,System.String,System.String)">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules.</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQueryExtensions.Query(UnityEngine.Experimental.UIElements.VisualElement,System.String,System.String[])">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules.</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQueryExtensions.Query(UnityEngine.Experimental.UIElements.VisualElement,System.String,System.String[])">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules. Template parameter specifies the type of elements the selector applies to (ie: Label, Button, etc).</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQueryExtensions.Query(UnityEngine.Experimental.UIElements.VisualElement,System.String,System.String)">
      <summary>
        <para>Initializes a QueryBuilder with the specified selection rules. Template parameter specifies the type of elements the selector applies to (ie: Label, Button, etc).</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <param name="name">If specified, will select elements with this name.</param>
      <param name="classes">If specified, will select elements with the given class (not to be confused with Type).</param>
      <param name="className">If specified, will select elements with the given class (not to be confused with Type).</param>
      <returns>
        <para>QueryBuilder configured with the associated selection rules.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UQueryExtensions.Query(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Initializes an empty QueryBuilder on a specified root element.</para>
      </summary>
      <param name="e">Root VisualElement on which the selector will be applied.</param>
      <returns>
        <para>An empty QueryBuilder on a specified root element.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.UxmlFactory`1">
      <summary>
        <para>Base class for all user-defined UXML Element factories.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.UxmlFactory_1.DoCreate(UnityEngine.Experimental.UIElements.IUxmlAttributes,UnityEngine.Experimental.UIElements.CreationContext)">
      <summary>
        <para>This method is meant to be overriden by the user. It must create an element of the expected type, using the creation context and available properties.</para>
      </summary>
      <param name="bag">Read access to the UXML attributes.</param>
      <param name="cc">Context of the current instantiation.</param>
      <returns>
        <para>An instance of the target type.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElement">
      <summary>
        <para>Base class for objects that are part of the UIElements visual tree.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.childCount">
      <summary>
        <para> Number of child elements in this object's contentContainer
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.clippingOptions">
      <summary>
        <para>Should this element clip painting to its boundaries.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.contentContainer">
      <summary>
        <para> child elements are added to this element, usually this
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.dataWatch">
      <summary>
        <para>Access to this element data watch interface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.enabledInHierarchy">
      <summary>
        <para>Returns true if the VisualElement is enabled in its own hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.enabledSelf">
      <summary>
        <para>Returns true if the VisualElement is enabled locally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.persistenceKey">
      <summary>
        <para>Used for view data persistence (ie. tree expanded states, scroll position, zoom level).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.schedule">
      <summary>
        <para>Retrieves this VisualElement's IVisualElementScheduler</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.shadow">
      <summary>
        <para> Access to this element physical hierarchy
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.style">
      <summary>
        <para>Reference to the style object of this element.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.userData">
      <summary>
        <para>This property can be used to associate application-specific user data with this VisualElement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Add(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Add an element to this element's contentContainer</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.AddStyleSheetPath(System.String)">
      <summary>
        <para>Adds this stylesheet file to this element list of applied styles</para>
      </summary>
      <param name="sheetPath"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.AnyDirty(UnityEngine.Experimental.UIElements.ChangeType)">
      <summary>
        <para>Checks if any of the ChangeTypes have been marked dirty.</para>
      </summary>
      <param name="type">The ChangeType(s) to check.</param>
      <returns>
        <para>True if at least one of the checked ChangeTypes have been marked dirty.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.BringToFront">
      <summary>
        <para>Brings this element to the end of its parent children list. The element will be visually in front of any overlapping sibling elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Children">
      <summary>
        <para>Returns the elements from its contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Clear">
      <summary>
        <para>Remove all child elements from this element's contentContainer</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElement.ClippingOptions">
      <summary>
        <para>Options to select clipping strategy.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElement.ClippingOptions.ClipAndCacheContents">
      <summary>
        <para>Enables clipping and renders contents to a cache texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElement.ClippingOptions.ClipContents">
      <summary>
        <para>Will enable clipping. This VisualElement and its children's content will be limited to this element's bounds.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElement.ClippingOptions.NoClipping">
      <summary>
        <para>Will disable clipping and let children VisualElements paint outside its bounds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Contains(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Returns true if the element is a direct child of this VisualElement</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.ElementAt(System.Int32)">
      <summary>
        <para>Retrieves the child element at position</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.FindAncestorUserData">
      <summary>
        <para>Searchs up the hierachy of this VisualElement and retrieves stored userData, if any is found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.FindCommonAncestor(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Finds the lowest commont ancestor between two VisualElements inside the VisualTree hierarchy</para>
      </summary>
      <param name="other"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.GetEnumerator">
      <summary>
        <para>Allows to iterate into this elements children</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.GetFirstAncestorOfType">
      <summary>
        <para>Walks up the hierarchy, starting from this element's parent, and returns the first VisualElement of this type</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.GetFirstOfType">
      <summary>
        <para>Walks up the hierarchy, starting from this element, and returns the first VisualElement of this type</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.GetFullHierarchicalPersistenceKey">
      <summary>
        <para>Combine this VisualElement's VisualElement.persistenceKey with those of its parents to create a more unique key for use with VisualElement.GetOrCreatePersistentData.</para>
      </summary>
      <returns>
        <para>Full hierarchical persistence key.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.GetOrCreatePersistentData(System.Object,System.String)">
      <summary>
        <para>Takes a reference to an existing persisted object and a key and returns the object either filled with the persisted state or as-is.</para>
      </summary>
      <param name="existing">An existing object to be persisted, or null to create a new object. If no persisted state is found, a non-null object will be returned as-is.</param>
      <param name="key">The key for the current VisualElement to be used with the persistence store on the EditorWindow.</param>
      <returns>
        <para>The same object being passed in (or a new one if null was passed in), but possibly with its persistent state restored.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.GetOrCreatePersistentData(UnityEngine.ScriptableObject,System.String)">
      <summary>
        <para>Takes a reference to an existing persisted object and a key and returns the object either filled with the persisted state or as-is.</para>
      </summary>
      <param name="existing">An existing object to be persisted, or null to create a new object. If no persisted state is found, a non-null object will be returned as-is.</param>
      <param name="key">The key for the current VisualElement to be used with the persistence store on the EditorWindow.</param>
      <returns>
        <para>The same object being passed in (or a new one if null was passed in), but possibly with its persistent state restored.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.HasStyleSheetPath">
      <summary>
        <para>Checks if this stylesheet file is in this element list of applied styles</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy">
      <summary>
        <para>Hierarchy is a sctuct allowing access to the shadow hierarchy of visual elements</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.childCount">
      <summary>
        <para> Number of child elements in this object's contentContainer
                </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.parent">
      <summary>
        <para> Access the physical parent of this element in the hierarchy
                </para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.Add(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Add an element to this element's contentContainer</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.Children">
      <summary>
        <para>Returns the elements from its contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.Clear">
      <summary>
        <para>Remove all child elements from this element's contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.ElementAt(System.Int32)">
      <summary>
        <para>Retrieves the child element at position</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.Insert">
      <summary>
        <para>Insert an element into this element's contentContainer</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.Remove(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Removes this child from the hierarchy</para>
      </summary>
      <param name="child"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.RemoveAt(System.Int32)">
      <summary>
        <para>Remove the child element located at this position from this element's contentContainer</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.Sort(System.Comparison`1&lt;UnityEngine.Experimental.UIElements.VisualElement&gt;)">
      <summary>
        <para>Reorders child elements from this VisualElement contentContainer.</para>
      </summary>
      <param name="comp">Sorting criteria.</param>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.Hierarchy.this">
      <summary>
        <para> Access to this element physical hierarchy
                </para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Insert">
      <summary>
        <para>Insert an element into this element's contentContainer</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElement.MeasureMode">
      <summary>
        <para>The modes available to measure VisualElement sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElement.MeasureMode.AtMost">
      <summary>
        <para>At Most. The element should give its preferred width/height but no more than the value passed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElement.MeasureMode.Exactly">
      <summary>
        <para>The element should give the width/height that is passed in and derive the opposite site from this value (for example, calculate text size from a fixed width).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElement.MeasureMode.Undefined">
      <summary>
        <para>The element should give its preferred width/height without any constraint.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.OnPersistentDataReady">
      <summary>
        <para>Called when the persistent data is accessible and/or when the data or persistence key have changed (VisualElement is properly parented).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.OnStyleResolved(UnityEngine.Experimental.UIElements.StyleSheets.ICustomStyle)">
      <summary>
        <para>Callback when the styles of an object have changed.</para>
      </summary>
      <param name="style"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.OverwriteFromPersistedData(System.Object,System.String)">
      <summary>
        <para>Overwrite object from the persistent data store.</para>
      </summary>
      <param name="key">The key for the current VisualElement to be used with the persistence store on the EditorWindow.</param>
      <param name="obj">Object to overwrite.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.PlaceBehind(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Places this element right before the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually behind of its sibling.</para>
      </summary>
      <param name="sibling">The sibling element.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.PlaceInFront(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Places this element right after the sibling element in their parent children list. If the element and the sibling position overlap, the element will be visually in front of its sibling.</para>
      </summary>
      <param name="sibling">The sibling element.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Remove(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>Removes this child from the hierarchy</para>
      </summary>
      <param name="element"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.RemoveAt(System.Int32)">
      <summary>
        <para>Remove the child element located at this position from this element's contentContainer</para>
      </summary>
      <param name="index"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.RemoveFromHierarchy">
      <summary>
        <para>Removes this element from its parent hierarchy</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.RemoveStyleSheetPath(System.String)">
      <summary>
        <para>Removes this stylesheet file from this element list of applied styles</para>
      </summary>
      <param name="sheetPath"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.SavePersistentData">
      <summary>
        <para>Write persistence data to file.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.SendToBack">
      <summary>
        <para>Sends this element to the beginning of its parent children list. The element will be visually behind any overlapping sibling elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.SetEnabled(System.Boolean)">
      <summary>
        <para>Changes the VisualElement enabled state. A disabled VisualElement does not receive most events.</para>
      </summary>
      <param name="value">New enabled state</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElement.Sort(System.Comparison`1&lt;UnityEngine.Experimental.UIElements.VisualElement&gt;)">
      <summary>
        <para>Reorders child elements from this VisualElement contentContainer.</para>
      </summary>
      <param name="comp">Sorting criteria.</param>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElement.this">
      <summary>
        <para> Access to this element physical hierarchy
                </para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElementExtensions">
      <summary>
        <para>VisualElementExtensions is a set of extension methods useful for VisualElement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElementExtensions.AddManipulator(UnityEngine.Experimental.UIElements.VisualElement,UnityEngine.Experimental.UIElements.IManipulator)">
      <summary>
        <para>Add a manipulator associated to a VisualElement.</para>
      </summary>
      <param name="ele">VisualElement associated to the manipulator.</param>
      <param name="manipulator">Manipulator to be added to the VisualElement.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElementExtensions.RemoveManipulator(UnityEngine.Experimental.UIElements.VisualElement,UnityEngine.Experimental.UIElements.IManipulator)">
      <summary>
        <para>Remove a manipulator associated to a VisualElement.</para>
      </summary>
      <param name="ele">VisualElement associated to the manipulator.</param>
      <param name="manipulator">Manipulator to be removed from the VisualElement.</param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElementExtensions.StretchToParentWidth(UnityEngine.Experimental.UIElements.VisualElement)">
      <summary>
        <para>The given VisualElement's left and right edges will be aligned with the corresponding edges of the parent element.</para>
      </summary>
      <param name="elem"></param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElementFocusChangeDirection">
      <summary>
        <para>Define focus change directions for the VisualElementFocusRing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElementFocusChangeDirection.lastValue">
      <summary>
        <para>Last value for the direction defined by this class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElementFocusChangeDirection.left">
      <summary>
        <para>The focus is moving to the left.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElementFocusChangeDirection.right">
      <summary>
        <para>The focus is moving to the right.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElementFocusRing">
      <summary>
        <para>Implementation of a linear focus ring. Elements are sorted according to their focusIndex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.VisualElementFocusRing.defaultFocusOrder">
      <summary>
        <para>The focus order for elements having 0 has a focusIndex.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElementFocusRing.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="root">The root of the element tree for which we want to build a focus ring.</param>
      <param name="dfo">Default ordering of the elements in the ring.</param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.VisualElementFocusRing.DefaultFocusOrder">
      <summary>
        <para>Ordering of elements in the focus ring.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElementFocusRing.DefaultFocusOrder.ChildOrder">
      <summary>
        <para>Order elements using a depth-first pre-order traversal of the element tree.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElementFocusRing.DefaultFocusOrder.PositionXY">
      <summary>
        <para>Order elements according to their position, first by X, then by Y.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.UIElements.VisualElementFocusRing.DefaultFocusOrder.PositionYX">
      <summary>
        <para>Order elements according to their position, first by Y, then by X.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElementFocusRing.GetFocusChangeDirection(UnityEngine.Experimental.UIElements.Focusable,UnityEngine.Experimental.UIElements.EventBase)">
      <summary>
        <para>Get the direction of the focus change for the given event. For example, when the Tab key is pressed, focus should be given to the element to the right in the focus ring.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="e"></param>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.VisualElementFocusRing.GetNextFocusable(UnityEngine.Experimental.UIElements.Focusable,UnityEngine.Experimental.UIElements.FocusChangeDirection)">
      <summary>
        <para>Get the next element in the given direction.</para>
      </summary>
      <param name="currentFocusable"></param>
      <param name="direction"></param>
    </member>
    <member name="T:UnityEngine.Experimental.UIElements.WheelEvent">
      <summary>
        <para>Mouse wheel event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.UIElements.WheelEvent.delta">
      <summary>
        <para>The amount of scrolling applied on the mouse wheel.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.WheelEvent.#ctor">
      <summary>
        <para>Constructor. Avoid newing events. Instead, use GetPooled() to get an event from a pool of reusable events.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.WheelEvent.GetPooled(UnityEngine.Event)">
      <summary>
        <para>Get an event from the event pool and initialize it with the given values. Use this function instead of newing events. Events obtained from this function should be released back to the pool using ReleaseEvent().</para>
      </summary>
      <param name="systemEvent">A wheel IMGUI event.</param>
      <returns>
        <para>A wheel event.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.UIElements.WheelEvent.Init">
      <summary>
        <para>Reset the event members to their initial value.</para>
      </summary>
    </member>
  </members>
</doc>
