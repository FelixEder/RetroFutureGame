<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.XRModule</name>
    </assembly>
    <member name="T:UnityEngine.Experimental.Subsystem">
      <summary>
        <para>An Subsystem is initialized from an SubsystemDescriptor for a given Subsystem (Example, Input, Environment, Display, etc.) and provides an interface to interact with that given Subsystem until it is Destroyed. After an Subsystem is created it can be Started or Stopped to turn on and off functionality (and preserve performance). The base type for Subsystem only exposes this functionality; this class is designed to be a base class for derived classes that expose more functionality specific to a given Subsystem.

            Note: initializing a second Subsystem from the same SubsystemDescriptor will return a reference to the existing Subsystem as only one Subsystem is currently allowed for a single Subsystem provider.
            </para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Subsystem.Destroy">
      <summary>
        <para>Destroys this instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Subsystem.Start">
      <summary>
        <para>Starts an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.Subsystem.Stop">
      <summary>
        <para>Stops an instance of a subsystem.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.SubsystemDescriptor`1">
      <summary>
        <para>Information about a subsystem that can be queried before creating a subsystem instance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.SubsystemDescriptor_1.Create">
      <summary>
        <para>Creates an Subsystem from this descriptor.</para>
      </summary>
      <returns>
        <para>Instance of subsystem.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.SubsystemManager">
      <summary>
        <para>Gives access to subsystems which provide additional functionality through plugins.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.SubsystemManager.GetInstances(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Returns active Subsystems of a specific instance type.</para>
      </summary>
      <param name="instances">Active instances.</param>
    </member>
    <member name="M:UnityEngine.Experimental.SubsystemManager.GetSubsystemDescriptors(System.Collections.Generic.List`1&lt;T&gt;)">
      <summary>
        <para>Returns a list of SubsystemDescriptors which describe additional functionality that can be enabled.</para>
      </summary>
      <param name="descriptors">Subsystem specific descriptors.</param>
    </member>
    <member name="T:UnityEngine.Experimental.XR.BoundedPlane">
      <summary>
        <para>Structure describing a bounded plane representing a real-world surface.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Alignment">
      <summary>
        <para>The alignment of the plane, e.g., horizontal or vertical.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Center">
      <summary>
        <para>Center point of the plane in device space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.BoundedPlane.GetCorners(UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;,UnityEngine.Vector3&amp;)">
      <summary>
        <para>Outputs four points, in device space, representing the four corners of the plane. The corners are in clockwise order.</para>
      </summary>
      <param name="p0">The vertex of the first corner.</param>
      <param name="p1">The vertex of the second corner.</param>
      <param name="p2">The vertex of the third corner.</param>
      <param name="p3">The vertex of the fourth corner.</param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Height">
      <summary>
        <para>Current height of the plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Id">
      <summary>
        <para>A session-unique identifier for the plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Normal">
      <summary>
        <para>Normal vector of the plane in device space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Plane">
      <summary>
        <para>Returns the infinite Plane associated with this BoundedPlane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Pose">
      <summary>
        <para>Pose of the plane in device space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Size">
      <summary>
        <para>Current size of the plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.SubsumedById">
      <summary>
        <para>A session-unique identifier for the BoundedPlane that subsumed this plane.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.BoundedPlane.TryGetBoundary(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Try to retrieve a list of positions in device space describing current plane boundary.</para>
      </summary>
      <param name="boundaryOut">A list of vertices representing the boundary.</param>
      <returns>
        <para>True if the plane exists (i.e., is still being tracked), otherwise false.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Experimental.XR.BoundedPlane.Width">
      <summary>
        <para>Current width of the plane.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.FrameReceivedEventArgs">
      <summary>
        <para>Structure containing data passed during Frame Received Event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.FrameReceivedEventArgs.CameraSubsystem">
      <summary>
        <para>Reference to the XRCameraSubsystem associated with this event.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneAddedEventArgs">
      <summary>
        <para>Contains data supplied to a XRPlaneSubsystem.PlaneAdded event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneAddedEventArgs.Plane">
      <summary>
        <para>The BoundedPlane that was added.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneAddedEventArgs.PlaneSubsystem">
      <summary>
        <para>A reference to the PlaneSubsystem object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneAlignment">
      <summary>
        <para>Describes current plane alignment in mixed reality space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.PlaneAlignment.Horizontal">
      <summary>
        <para>Plane has horizontal alignment.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.PlaneAlignment.NonAxis">
      <summary>
        <para>Plane is not alligned along cardinal (X, Y or Z) axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.PlaneAlignment.Vertical">
      <summary>
        <para>Plane has vertical alignment.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneRemovedEventArgs">
      <summary>
        <para>Contains data supplied to a XRPlaneSubsystem.PlaneRemoved event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneRemovedEventArgs.Plane">
      <summary>
        <para>The BoundedPlane that was removed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneRemovedEventArgs.PlaneSubsystem">
      <summary>
        <para>A reference to the XRPlaneSubsystem object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PlaneUpdatedEventArgs">
      <summary>
        <para>Contains data supplied to a XRPlaneSubsystem.PlaneUpdated event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneUpdatedEventArgs.Plane">
      <summary>
        <para>The BoundedPlane that was updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PlaneUpdatedEventArgs.PlaneSubsystem">
      <summary>
        <para>A reference to the XRPlaneSubsystem object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.PointCloudUpdatedEventArgs">
      <summary>
        <para>Contains data supplied to a XRDepth.PointCloudUpdated event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.PointCloudUpdatedEventArgs.DepthSubsystem">
      <summary>
        <para>A reference to the XRDepthSubsystem object from which the event originated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.ReferencePoint">
      <summary>
        <para>Describes the transform data of a real-world point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePoint.Id">
      <summary>
        <para>ID for the reference point that is unique across the session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePoint.Pose">
      <summary>
        <para>The pose (position and rotation) of the reference point. Respond to changes in this pose to correct for changes in the device's understanding of where this point is in the real world.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePoint.TrackingState">
      <summary>
        <para>The TrackingState of the reference point.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs">
      <summary>
        <para>Data to be passed to the user when the device corrects its understanding of the world enough that the ReferencePoint's position or rotation has changed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs.PreviousPose">
      <summary>
        <para>The previous Pose of the ReferencePoint, prior to this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs.PreviousTrackingState">
      <summary>
        <para>The previous TrackingState of the ReferencePoint, prior to this event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs.ReferencePoint">
      <summary>
        <para>The reference point that has the value of its position, rotation, or both changed enough through the device correcting its understanding of where this point should be located in device space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.SessionTrackingStateChangedEventArgs">
      <summary>
        <para>Structure defining Tracking State Changed event arguments passed when tracking state changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.SessionTrackingStateChangedEventArgs.NewState">
      <summary>
        <para>New Tracking State.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.SessionTrackingStateChangedEventArgs.SessionSubsystem">
      <summary>
        <para>Reference to the XRSessionSubsystem object associated with the event.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.TrackableId">
      <summary>
        <para>A session-unique identifier for trackables in the environment, e.g., planes and feature points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.TrackableId.InvalidId">
      <summary>
        <para>Represents an invalid id.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.TrackableId.ToString">
      <summary>
        <para>Generates a nicely formatted version of the id.</para>
      </summary>
      <returns>
        <para>A string unique to this id</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.XR.TrackableType">
      <summary>
        <para>A trackable is feature in the physical environment that a device is able to track, such as a plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.All">
      <summary>
        <para>All trackables (planes and point cloud)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.FeaturePoint">
      <summary>
        <para>A feature point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.None">
      <summary>
        <para>No trackable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneEstimated">
      <summary>
        <para>An estimated plane.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.Planes">
      <summary>
        <para>Any of the plane types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneWithinBounds">
      <summary>
        <para>Within the BoundedPlane.Size of a BoundedPlane</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneWithinInfinity">
      <summary>
        <para>The infinite plane of a BoundedPlane</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackableType.PlaneWithinPolygon">
      <summary>
        <para>The boundary of a BoundedPlane</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.TrackingState">
      <summary>
        <para>Current tracking state of the device.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Tracking">
      <summary>
        <para>Tracking is currently working.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Unavailable">
      <summary>
        <para>Tracking is not available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Experimental.XR.TrackingState.Unknown">
      <summary>
        <para>Tracking state is unknown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRCameraSubsystem">
      <summary>
        <para>Provides access to a device's camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystem.Camera">
      <summary>
        <para>Set current Camera component within the app to be used by this XRCameraInstance.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRCameraSubsystem.FrameReceived(System.Action`1&lt;UnityEngine.Experimental.XR.FrameReceivedEventArgs&gt;)">
      <summary>
        <para>Event raised when a new camera frame is received.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraSubsystem.GetTextures(System.Collections.Generic.List`1&lt;UnityEngine.Texture2D&gt;)">
      <summary>
        <para>Fills the provided texturesOut with the texture(s) associated with the XRCameraSubsystem.</para>
      </summary>
      <param name="texturesOut">A List of Texture2D to be filled. Passing null will throw an ArgumentNullException.</param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystem.LastUpdatedFrame">
      <summary>
        <para>The frame during which the camera subsystem was last successfully updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystem.LightEstimationRequested">
      <summary>
        <para>True if the XRCameraSubsystem should try to provide light estimation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystem.Material">
      <summary>
        <para>Set current Material to be used while rendering to the render target.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraSubsystem.TryGetAverageBrightness(System.Single&amp;)">
      <summary>
        <para>Provides brightness for the whole image as an average of all pixels' brightness.</para>
      </summary>
      <param name="averageBrightness">An estimated average brightness for the environment.</param>
      <returns>
        <para>Returns true if average brigthness was provided.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraSubsystem.TryGetAverageColorTemperature(System.Single&amp;)">
      <summary>
        <para>Provides color temperature for the whole image as an average of all pixels' color temperature.</para>
      </summary>
      <param name="averageColorTemperature">An estimated color temperature.</param>
      <returns>
        <para>Return true if succesful.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraSubsystem.TryGetDisplayMatrix(UnityEngine.Matrix4x4&amp;)">
      <summary>
        <para>Provides display matrix defining how texture is being rendered on the screen.</para>
      </summary>
      <param name="displayMatrix"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraSubsystem.TryGetProjectionMatrix(UnityEngine.Matrix4x4&amp;)">
      <summary>
        <para>Provides projection matrix used by camera subsystem.</para>
      </summary>
      <param name="projectionMatrix"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraSubsystem.TryGetShaderName(System.String&amp;)">
      <summary>
        <para>Provides shader name used by Camera subsystem to render texture.</para>
      </summary>
      <param name="shaderName"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRCameraSubsystem.TryGetTimestamp(System.Int64&amp;)">
      <summary>
        <para>Provides timestamp.</para>
      </summary>
      <param name="timestampNs"></param>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor">
      <summary>
        <para>Class providing information about  XRCameraSubsystem registration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor.ProvidesAverageBrightness">
      <summary>
        <para>Specifies if current subsystem is allowed to provide average brightness.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor.ProvidesAverageColorTemperature">
      <summary>
        <para>Specifies if current subsystem is allowed to provide average camera temperature.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor.ProvidesDisplayMatrix">
      <summary>
        <para>Specifies if current subsystem is allowed to provide display matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor.ProvidesProjectionMatrix">
      <summary>
        <para>Specifies if current subsystem is allowed to provide projection matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRCameraSubsystemDescriptor.ProvidesTimestamp">
      <summary>
        <para>Specifies if current subsystem is allowed to provide timestamp.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRDepthSubsystem">
      <summary>
        <para>Provides access to depth data of the physical environment, such as a point cloud.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRDepthSubsystem.GetConfidence(System.Collections.Generic.List`1&lt;System.Single&gt;)">
      <summary>
        <para>Retrieves the confidence values for each point in the point cloud.</para>
      </summary>
      <param name="confidenceOut">A list of floats containing all confidence values for the point cloud.</param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRDepthSubsystem.GetPoints(System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Retrieves the point cloud points.</para>
      </summary>
      <param name="pointsOut">A list of Vector3s containing all points in the point cloud.</param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRDepthSubsystem.LastUpdatedFrame">
      <summary>
        <para>The frame during which the point cloud was last updated.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRDepthSubsystem.PointCloudUpdated(System.Action`1&lt;UnityEngine.Experimental.XR.PointCloudUpdatedEventArgs&gt;)">
      <summary>
        <para>Raised once during each frame in which the point cloud is updated.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRDepthSubsystemDescriptor">
      <summary>
        <para>Class providing information about XRDepthSubsystem registration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRDepthSubsystemDescriptor.SupportsFeaturePoints">
      <summary>
        <para>When true, XRDepthSubsystem will provide list of feature points detected so far.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRInputSubsystem">
      <summary>
        <para>XRInputSubsystem
Instance is used to enable and disable the inputs coming from a specific plugin.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRInputSubsystemDescriptor">
      <summary>
        <para>Information about an Input subsystem.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRPlaneSubsystem">
      <summary>
        <para>Provides methods, events, and properties that provides information about planes detected in the environment. </para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRPlaneSubsystem.GetAllPlanes(System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.BoundedPlane&gt;)">
      <summary>
        <para>Get all the BoundedPlanes currently tracked by the system.</para>
      </summary>
      <param name="planesOut">A list of BoundedPlanes containing all planes currently tracked by the system.</param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRPlaneSubsystem.LastUpdatedFrame">
      <summary>
        <para>The frame during which the planes were last updated.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRPlaneSubsystem.PlaneAdded(System.Action`1&lt;UnityEngine.Experimental.XR.PlaneAddedEventArgs&gt;)">
      <summary>
        <para>Raised for each BoundedPlane that has been added in the current frame.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRPlaneSubsystem.PlaneRemoved(System.Action`1&lt;UnityEngine.Experimental.XR.PlaneRemovedEventArgs&gt;)">
      <summary>
        <para>Raised for each BoundedPlane that has been removed in the current frame.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRPlaneSubsystem.PlaneUpdated(System.Action`1&lt;UnityEngine.Experimental.XR.PlaneUpdatedEventArgs&gt;)">
      <summary>
        <para>Raised for each plane that has been updated in the current frame.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRPlaneSubsystem.TryGetPlane(UnityEngine.Experimental.XR.TrackableId,UnityEngine.Experimental.XR.BoundedPlane&amp;)">
      <summary>
        <para>Get a BoundedPlane by TrackableId</para>
      </summary>
      <param name="planeId">The session-unique TrackableId of the plane to get.</param>
      <param name="plane">The BoundedPlane with the supplied planeId</param>
      <returns>
        <para>True if the BoundedPlane with planeId exists, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRPlaneSubsystem.TryGetPlaneBoundary(UnityEngine.Experimental.XR.TrackableId,System.Collections.Generic.List`1&lt;UnityEngine.Vector3&gt;)">
      <summary>
        <para>Try to retrieve a list of positions in device space describing the current plane boundary.</para>
      </summary>
      <param name="planeId">The session-unique TrackableId of the plane.</param>
      <param name="boundaryOut">A list of vertices representing the plane's boundary.</param>
      <returns>
        <para>True if the plane exists (i.e., is still being tracked), otherwise false.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRPlaneSubsystemDescriptor">
      <summary>
        <para>Class providing information about XRPlaneSubsystem registration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRRaycastHit">
      <summary>
        <para>Structure describing the result of a XRRaycastSubsystem.Raycast hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.Distance">
      <summary>
        <para>The distance, in meters, from the screen to the hit's XRRaycastSubsystemHit.Position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.HitType">
      <summary>
        <para>The TrackableType(s) that were hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.Pose">
      <summary>
        <para>The position and rotation of the hit result in device space where the ray hit the trackable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRRaycastHit.TrackableId">
      <summary>
        <para>The TrackableId of the trackable that was hit by the raycast.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRRaycastSubsystem">
      <summary>
        <para>Provides methods and properties that allow for querying portions of the physical environment that are near a provided specified ray. These trackables include planes and depth data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRRaycastSubsystem.Raycast(UnityEngine.Vector3,System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.XRRaycastHit&gt;,UnityEngine.Experimental.XR.TrackableType)">
      <summary>
        <para>Casts a ray from a screen point against selected trackables (e.g., planes and feature points).</para>
      </summary>
      <param name="screenPoint">The screen point from which to cast.</param>
      <param name="hitResults">The resulting list of XRRaycastHit.</param>
      <param name="trackableTypeMask">An optional mask of TrackableType to raycast against.</param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRRaycastSubsystem.Raycast(UnityEngine.Ray,UnityEngine.Experimental.XR.XRDepthSubsystem,UnityEngine.Experimental.XR.XRPlaneSubsystem,System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.XRRaycastHit&gt;,UnityEngine.Experimental.XR.TrackableType,System.Single)">
      <summary>
        <para>Casts a ray using ray against selected trackables (e.g., planes and feature points).</para>
      </summary>
      <param name="ray">The Ray to use.</param>
      <param name="depthSubsystem">The XRDepthSubsystem to raycast against. May be null.</param>
      <param name="planeSubsystem">The XRPlaneSubsystem to raycast against. May be null.</param>
      <param name="hitResults">The resulting list of XRRaycastHit.</param>
      <param name="trackableTypeMask">An optional mask of TrackableType to raycast against.</param>
      <param name="pointCloudRaycastAngleInDegrees">When raycasting against feature points, cast a cone with this angle.</param>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRRaycastSubsystemDescriptor">
      <summary>
        <para>Class providing information about XRRaycastSubsystem registration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRReferencePointSubsystem">
      <summary>
        <para>Provides methods and properties that allow for querying, creating, and removing of reference points. These reference points are cues to the XRSessionSubsystem that indicate areas of interest in the environment which helps assure that tracking of these points remains accurate.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePointSubsystem.GetAllReferencePoints(System.Collections.Generic.List`1&lt;UnityEngine.Experimental.XR.ReferencePoint&gt;)">
      <summary>
        <para>Retrieves all ReferencePoints added by calls to XRReferencePointSubsystem.TryAddReferencePoint.</para>
      </summary>
      <param name="referencePointsOut">A list of ReferencePoints containing all reference points.</param>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRReferencePointSubsystem.LastUpdatedFrame">
      <summary>
        <para>The frame during which the reference points were last updated.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRReferencePointSubsystem.ReferencePointUpdated(System.Action`1&lt;UnityEngine.Experimental.XR.ReferencePointUpdatedEventArgs&gt;)">
      <summary>
        <para>Raised each frame for each ReferencePoint that had the values of its position, rotation, or both changed enough by the device correcting its understanding of where the point should be located in Unity space.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePointSubsystem.TryAddReferencePoint(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Experimental.XR.TrackableId&amp;)">
      <summary>
        <para>Attempt to add a ReferencePoint that gets tracked by the device.</para>
      </summary>
      <param name="position">Current position, in device space, of a point you want the device to track.</param>
      <param name="rotation">Current rotation, in device space, of a point you want the device to track.</param>
      <param name="referencePointId">If this method returns true, this is filled out with the ID (unique to the session) of the point.</param>
      <returns>
        <para>If the ReferencePoint was added successfully, this method returns true. Otherwise, it returns false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePointSubsystem.TryAddReferencePoint(UnityEngine.Pose,UnityEngine.Experimental.XR.TrackableId&amp;)">
      <summary>
        <para>Attempt to add a ReferencePoint that gets tracked by the device.</para>
      </summary>
      <param name="pose">Current pose, in device space, of a point you want the device to track.</param>
      <param name="referencePointId">If this method returns true, this is filled out with the ID (unique to the session) of the point.</param>
      <returns>
        <para>If the ReferencePoint was added successfully, this method returns true. Otherwise, it returns false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePointSubsystem.TryGetReferencePoint(UnityEngine.Experimental.XR.TrackableId,UnityEngine.Experimental.XR.ReferencePoint&amp;)">
      <summary>
        <para>Attempt to retrieve a ReferencePoint.</para>
      </summary>
      <param name="referencePointId">The ID of the ReferencePoint that TryAddReferencePoint filled out when you added this point.</param>
      <param name="referencePoint">The ReferencePoint to be filled out that matches the ID passed in.</param>
      <returns>
        <para>If the ReferencePoint was found and filled out successfully, this method returns true. Otherwise, it return false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Experimental.XR.XRReferencePointSubsystem.TryRemoveReferencePoint(UnityEngine.Experimental.XR.TrackableId)">
      <summary>
        <para>Attempt to remove a ReferencePoint getting tracked by the device.</para>
      </summary>
      <param name="referencePointId">ID of the ReferencePoint you wish to remove so the device no longer tries to track it.</param>
      <returns>
        <para>If the ReferencePoint was removed successfully, this method returns true. Otherwise, it returns false.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRReferencePointSubsystemDescriptor">
      <summary>
        <para>Class providing information about XRReferencePointSubsystem registration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRSessionSubsystem">
      <summary>
        <para>A collection of methods and properties used to interact with and configure an XR session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRSessionSubsystem.LastUpdatedFrame">
      <summary>
        <para>The frame during which the tracking state was last updated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Experimental.XR.XRSessionSubsystem.TrackingState">
      <summary>
        <para>Get current tracking status of the device.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.Experimental.XR.XRSessionSubsystem.TrackingStateChanged(System.Action`1&lt;UnityEngine.Experimental.XR.SessionTrackingStateChangedEventArgs&gt;)">
      <summary>
        <para>Raised when the TrackingState changes.</para>
      </summary>
      <param name="value"></param>
    </member>
    <member name="T:UnityEngine.Experimental.XR.XRSessionSubsystemDescriptor">
      <summary>
        <para>Class providing information about XRSessionSubsystem registration.</para>
      </summary>
    </member>
  </members>
</doc>
